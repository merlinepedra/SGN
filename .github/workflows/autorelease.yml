name: Automatic Release

on:
  push:
    branches: [ master ]
    tags: ["v[0-9]+.[0-9]+.[0-9]+"]

jobs:

  build-linux-amd64:
    name: Build Linux AMD64
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:

    - name: Clone Repo
      uses: actions/checkout@v3

    - name: Go 1.18
      uses: actions/setup-go@v2
      with:
        go-version: '1.18.5'

    - name: OS Packages
      run: |
        sudo apt-get update
        sudo apt-get -y install build-essential cmake git libcapstone-dev python3 time

    - name: Build Keystone
      run: |
        git clone https://github.com/EgeBalci/keystone
        mkdir keystone/build
        cd keystone/build
        ../make-lib.sh
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DLLVM_TARGETS_TO_BUILD="X86" -G "Unix Makefiles" ..
        make -j8
        sudo make install
        sudo ldconfig

    - name: Build SGN Linux (AMD64)
      run: |
        GOOS=linux CGO_ENABLED=1 GOARCH=amd64 go build -ldflags="-s -w -extldflags=-static" -trimpath -o sgn_linux-amd64
      
    - name: Compress
      run: zip -j sgn_linux-amd64.zip sgn_linux-amd64

    - name: Linux Artifacts (AMD64)
      uses: actions/upload-artifact@v2
      with:
        name: linux-amd64
        path: ./sgn_linux-amd64.zip

  build-linux-arm64:
    name: Build Linux ARM64
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
      - name: Clone Repo
        uses: actions/checkout@v3

      - uses: uraimo/run-on-arch-action@v2
        name: Run Commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu22.04
          dockerRunArgs: |
            --volume "${PWD}:/workdir"
          install: |
            apt-get update
            apt-get -y install wget tar build-essential cmake git libcapstone-dev python3 time

            mkdir -p /opt/go
            cd /opt/go
            wget -c https://golang.org/dl/go1.18.5.linux-arm64.tar.gz
            tar -C /opt/go -xzf go1.18.5.linux-arm64.tar.gz
            rm -f go1.18.5.linux-arm64.tar.gz
            export PATH=$PATH:/opt/go/go/bin
            go version

            cd ~
            git clone https://github.com/EgeBalci/keystone
            mkdir keystone/build
            cd keystone/build
            ../make-lib.sh
            cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DLLVM_TARGETS_TO_BUILD="AArch64" -G "Unix Makefiles" ..
            make -j8
            make install
            ldconfig
          run: |
            export PATH=$PATH:/opt/go/go/bin
            cd /workdir
            ls -alh
            GOOS=linux GOARCH=arm64 CGO_ENABLED=1 go build -buildvcs=false -ldflags="-s -w -extldflags=-static" -trimpath -o sgn_linux-arm64

      - name: Compress
        run: zip -j sgn_linux-arm64.zip ./sgn_linux-arm64

      - name: Linux Artifacts (ARM64)
        uses: actions/upload-artifact@v2
        with:
          name: linux-arm64
          path: ./sgn_linux-arm64.zip

  build-windows:
    name: Build Windows AMD64
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:

    - name: Clone Repo
      uses: actions/checkout@v3

    - name: Go 1.18
      uses: actions/setup-go@v2
      with:
        go-version: '1.18.5'

    - name: OS Packages
      run: |
        sudo apt-get update
        sudo apt-get -y install wget unzip build-essential cmake git libcapstone-dev python3 time mingw-w64 mingw-w64-tools

    - name: Build Keystone
      run: |
        wget https://github.com/keystone-engine/keystone/releases/download/0.9.2/keystone-0.9.2-win64.zip
        unzip keystone-0.9.2-win64.zip
        cd keystone-0.9.2-win64
        gendef keystone.dll
        x86_64-w64-mingw32-dlltool --as-flags=--64 -m i386:x86-64 -k --output-lib libkeystone.a --input-def keystone.def
        cp ./keystone.dll ../keystone.dll

    - name: Build SGN Windows
      run: |
        GOOS=windows GOARCH=amd64 CGO_ENABLED=1 CGO_LDFLAGS="-lkeystone -L./keystone-0.9.2-win64" CXX=x86_64-w64-mingw32-g++ CC=x86_64-w64-mingw32-gcc go build -ldflags "-linkmode external -extldflags -static" -trimpath -o sgn_windows-amd64.exe

    - name: Compress
      run: zip -j sgn_windows-amd64.zip ./sgn_windows-amd64.exe ./keystone.dll

    - name: Windows Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: windows-amd64
        path: ./sgn_windows-amd64.zip

  build-macos:
    name: Build MacOS AMD64/ARM64
    runs-on: macos-latest
    timeout-minutes: 45

    steps:

    - name: Clone Repo
      uses: actions/checkout@v3

    - name: Go 1.18
      uses: actions/setup-go@v2
      with:
        go-version: '1.18.5'

    - name: OS Packages
      run: |
        brew install cmake git capstone python3

    - name: Build Keystone
      run: |
        git clone https://github.com/EgeBalci/keystone
        mkdir keystone/build
        cd keystone/build
        ../make-lib.sh
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" -DLLVM_TARGETS_TO_BUILD="all" -G "Unix Makefiles" ..
        make -j8
        sudo make install

    - name: Build SGN AMD64
      run: |
        GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 CGO_LDFLAGS="-lkeystone -L/usr/lib/" go build -ldflags="-s -w" -trimpath -o sgn_macos-amd64

    - name: Build SGN ARM64
      run: |    
        GOOS=darwin GOARCH=arm64 CGO_ENABLED=1 CGO_LDFLAGS="-lkeystone -L/usr/lib/" go build -ldflags="-s -w" -trimpath -o sgn_macos-arm64

    - name: Compress
      run: |
        zip -j sgn_macos-amd64.zip ./sgn_macos-amd64
        zip -j sgn_macos-arm64.zip ./sgn_macos-arm64

    - name: MacOS Artifacts (AMD64)
      uses: actions/upload-artifact@v2
      with:
        name: macos-amd64
        path:  ./sgn_macos-amd64.zip

    - name: MacOS Artifacts (ARM64)
      uses: actions/upload-artifact@v2
      with:
        name: macos-arm64
        path:  ./sgn_macos-arm64.zip

  tagged-release:

    needs: [build-macos, build-windows, build-linux-amd64, build-linux-arm64]

    name: "Tagged Release"
    if: startsWith( github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
    - run: mkdir -p ./builds
    - uses: actions/download-artifact@v2
      with:
        path: ./builds

    - name: "Publish Release"
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: true
        files: |
          ./builds/**.zip
